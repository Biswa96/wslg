

resources:
  repositories:
  - repository: FreeRDP
    type: git
    name: DxgkLinux/FreeRDP
    ref: working
  - repository: weston
    type: git
    name: DxgkLinux/weston
    ref: working
  - repository: pulseaudio
    type: git
    name: DxgkLinux/pulseaudio
    ref: working

trigger:
  - working
jobs:
- job: 'Build_Ubuntu'
  displayName: 'Build (Ubuntu)'

  pool:
    vmImage: 'ubuntu-latest'
    
  steps:
    - checkout: FreeRDP
    - checkout: weston
    - checkout: pulseaudio
    - checkout: self

    - task: DockerInstaller@0
      inputs:
        dockerVersion: '19.03.12'
        releaseType: 'edge'
    - bash: |
            curl -L -o ~/.docker/cli-plugins/docker-buildx --create-dirs ${BUILDX_URL}
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            ~/.docker/cli-plugins/docker-buildx create --use
            ~/.docker/cli-plugins/docker-buildx inspect --bootstrap
      displayName: Prepare buildx
      env:
        BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64

    - script: |
              echo '{ "experimental": true }' | sudo tee /etc/docker/daemon.json
              sudo service docker restart
      displayName: 'Enable Docker Engine experimental '

    - script: mv FreeRDP/ wslg/vendor/ &&
              mv weston/ wslg/vendor/ &&
              mv pulseaudio/ wslg/vendor/
      displayName: 'Move sub projects (FreeRDP, Weston)'

    - script: docker build -t system-distro-x64 
              ./wslg 
              --build-arg SYSTEMDISTRO_VERSION=`git --git-dir=wslg/.git rev-parse --verify HEAD`
              --build-arg SYSTEMDISTRO_ARCH=x86_64
      displayName: 'Create docker image x64'

    - script: docker export `docker create system-distro-x64` > $(Agent.BuildDirectory)/system_x64.tar
      displayName: 'Create system_x64.tar'

    - script: ~/.docker/cli-plugins/docker-buildx build 
              --output type=tar,dest=$(Agent.BuildDirectory)/system_arm64.tar 
              --platform=linux/arm64 
              ./wslg 
              --build-arg SYSTEMDISTRO_VERSION=`git --git-dir=wslg/.git rev-parse --verify HEAD` 
              --build-arg SYSTEMDISTRO_ARCH=aarch64
      displayName: 'Create system_arm64.tar'

    - script: git clone --branch v0.8.9 --single-branch https://github.com/microsoft/hcsshim.git
      displayName: 'Clone hcsshim repo for tar2ext4 tool'

    - task: Go@0
      inputs:
        command: 'custom'
        customCommand: 'run'
        arguments: 'tar2ext4.go -vhd -i $(Agent.BuildDirectory)/system_x64.tar -o $(Agent.BuildDirectory)/system_x64.vhd'
        workingDirectory: 'hcsshim/cmd/tar2ext4'
      displayName: 'Create system_x64.vhd'

    - task: Go@0
      inputs:
        command: 'custom'
        customCommand: 'run'
        arguments: 'tar2ext4.go -vhd -i $(Agent.BuildDirectory)/system_arm64.tar -o $(Agent.BuildDirectory)/system_arm64.vhd'
        workingDirectory: 'hcsshim/cmd/tar2ext4'
      displayName: 'Create system_arm64.vhd'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish system_x64.vhd artifact'
      inputs:
        targetPath: $(Agent.BuildDirectory)/system_x64.vhd
        artifact: 'system_x64.vhd'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish system_arm64.vhd artifact'
      inputs:
        targetPath: $(Agent.BuildDirectory)/system_arm64.vhd
        artifact: 'system_arm64.vhd'
        publishLocation: 'pipeline'

- job: 'Build_Windows'
  dependsOn: 'Build_Ubuntu'
  displayName: 'Package (Windows)'
  
  pool:
    vmImage: 'windows-2019'
  
  steps:
  - checkout: self

  - powershell: 'Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(''https://chocolatey.org/install.ps1''))'
    displayName: 'Install Choco'

  - script: 'choco install gitversion.portable --pre'
    displayName: 'Install GitVersion'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download system_x64.vhd'
    inputs:
      buildType: 'current'
      artifactName: 'system_x64.vhd'
      targetPath: 'msi/'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download system_arm64.vhd'
    inputs:
      buildType: 'current'
      artifactName: 'system_arm64.vhd'
      targetPath: 'msi/'

  - task: PowerShell@2
    displayName: 'Update wslg.wxs version'
    inputs:
      targetType: filePath
      filePath: .\msi\updateversion.ps1
      arguments: '.\msi\wslg.wxs'
      pwsh: true

  - script: '"%WIX%bin\candle" wslg.wxs -dVhdFile=system_x64.vhd -o obj_x64\'
    workingDirectory: msi
    displayName: 'WiX Candle (x64)'

  - script: '"%WIX%bin\light" obj_x64\wslg.wixobj -o bin\wslg_update_x64.msi'
    workingDirectory: msi
    displayName: 'WiX Light (x64)'

  - script: '"%WIX%bin\candle" wslg.wxs -dVhdFile=system_arm64.vhd -o obj_arm64\'
    workingDirectory: msi
    displayName: 'WiX Candle (arm64)'

  - script: '"%WIX%bin\light" obj_arm64\wslg.wixobj -o bin\wslg_update_arm64.msi'
    workingDirectory: msi
    displayName: 'WiX Light (arm64)'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish WSLG installer'
    inputs:
      targetPath: msi/bin/wslg_update_x64.msi
      artifact: 'wslg_update_x64.msi'
      publishLocation: 'pipeline'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish WSLG installer'
    inputs:
      targetPath: msi/bin/wslg_update_arm64.msi
      artifact: 'wslg_update_arm64.msi'
      publishLocation: 'pipeline'